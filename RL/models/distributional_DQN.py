# This code was generated by OpenAI chatGPT 3.5


import torch
import torch.nn as nn
import torch.optim as optim

class DistributionalNet(nn.Module):
    def __init__(self, num_actions, num_atoms, vmin, vmax):
        super(DistributionalNet, self).__init__()
        self.num_actions = num_actions
        self.num_atoms = num_atoms
        self.vmin = vmin
        self.vmax = vmax
        self.fc1 = nn.Linear(state_size, 128)
        self.fc2 = nn.Linear(128, num_actions * num_atoms)
        
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.fc2(x).view(-1, self.num_actions, self.num_atoms)
        return torch.softmax(x, dim=-1)  # Output probabilities over atoms

class DistributionalDQN:
    def __init__(self, state_size, num_actions, num_atoms, vmin, vmax, lr=0.001):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.model = DistributionalNet(num_actions, num_atoms, vmin, vmax).to(self.device)
        self.optimizer = optim.Adam(self.model.parameters(), lr=lr)
        
    def train(self, states, actions, rewards, next_states, dones, gamma, delta_z):
        states = torch.tensor(states, dtype=torch.float32).to(self.device)
        next_states = torch.tensor(next_states, dtype=torch.float32).to(self.device)
        rewards = torch.tensor(rewards, dtype=torch.float32).to(self.device)
        actions = torch.tensor(actions, dtype=torch.long).to(self.device)
        dones = torch.tensor(dones, dtype=torch.float32).to(self.device)
                with torch.no_grad():
            next_dist = self.model(next_states)
            next_actions = torch.argmax(next_dist.sum(dim=-1), dim=-1)  # Maximize expected value
            next_probs = next_dist[range(next_dist.size(0)), next_actions]  # Probabilities of selected actions
            target_z = rewards.unsqueeze(1) + (1 - dones.unsqueeze(1)) * gamma * delta_z * torch.linspace(vmin, vmax, num_atoms).unsqueeze(0)
            target_z = torch.clamp(target_z, vmin, vmax)
            b = (target_z - vmin) / delta_z
            l = b.floor().long()
            u = b.ceil().long()
            l[(u > 0) * (l == u)] -= 1
            u[(l < (num_atoms - 1)) * (l == u)] += 1
            m_prob = torch.zeros(next_dist.size()).to(self.device)
            m_prob.view(-1).index_add_(0, (l + torch.arange(0, next_dist.size(0), device=self.device).unsqueeze(1) * next_dist.size(1)).view(-1), (next_probs * (u.float() - b)).view(-1))
            m_prob.view(-1).index_add_(0, (u + torch.arange(0, next_dist.size(0), device=self.device).unsqueeze(1) * next_dist.size(1)).view(-1), (next_probs * (b - l.float())).view(-1))
        
        dist = self.model(states)
        log_probs = torch.log(dist[range(dist.size(0)), actions])
        loss = -(m_prob * log_probs).sum(dim=-1).mean()
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()
