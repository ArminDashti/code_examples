# This code was generated by OpenAI chatGPT 3.5


import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np

class ADRQN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(ADRQN, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.rnn = nn.GRU(input_size, hidden_size, batch_first=True)
        self.fc = nn.Sequential(
            nn.Linear(hidden_size + output_size, 64),
            nn.ReLU(),
            nn.Linear(64, output_size)
        )

    def forward(self, x, prev_action, hidden_state):
        output, hidden_state = self.rnn(x, hidden_state)
        concatenated = torch.cat((output[:, -1, :], prev_action), dim=1)
        q_values = self.fc(concatenated)
        return q_values, hidden_state


input_size = 10  # Example input size
hidden_size = 32  # Example hidden size
output_size = 4  # Example output size
adrqn = ADRQN(input_size, hidden_size, output_size)
x = torch.randn(1, 5, input_size)  # Example batch of input sequences
prev_action = torch.randn(1, output_size)  # Example previous action
hidden_state = torch.zeros(1, 1, hidden_size)  # Example initial hidden state
q_values, new_hidden_state = adrqn(x, prev_action, hidden_state)
print("Q-values:", q_values)
